name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PROJECT_ID: opensearch-doc-search
  REGION: us-central1

jobs:
  # Security and Code Quality Checks
  security-check:
    name: Security & Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Run ESLint
        run: npm run lint

      - name: Run Prettier check
        run: npx prettier --check "**/*.{js,jsx,ts,tsx,json,md}"

      - name: Check for secrets in code
        run: |
          if grep -r "password\|secret\|key\|token" . --exclude-dir=node_modules --exclude-dir=.git; then
            echo "⚠️  Potential secrets found in code"
            exit 1
          fi

  # Unit and Integration Tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: security-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm test

      - name: Run integration tests
        run: npm run test:integration

      - name: Run end-to-end tests
        run: npm run test:e2e

      - name: Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info

  # Build and Package
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Build backend
        run: npm run build:backend

      - name: Run security scan on build artifacts
        run: |
          # Scan for vulnerabilities in built files
          npm audit --audit-level=high

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            client/build/
            backend-deploy/
          retention-days: 7

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    environment: staging
    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Deploy frontend to staging
        run: |
          cd client/build
          gcloud app deploy app.yaml --version staging-frontend --quiet

      - name: Deploy backend to staging
        run: |
          cd backend-deploy
          gcloud app deploy app.yaml --version staging-backend --quiet

      - name: Run staging health checks
        run: |
          # Wait for deployment to be ready
          sleep 30
          
          # Test frontend
          curl -f https://staging-dot-${{ env.PROJECT_ID }}.uc.r.appspot.com/ || exit 1
          
          # Test backend
          curl -f https://staging-backend-dot-${{ env.PROJECT_ID }}.uc.r.appspot.com/api/health || exit 1

      - name: Run staging tests
        run: |
          npm install -g artillery
          artillery run tests/staging-load-test.yml

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    environment: production
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Create production backup
        run: |
          # Backup current production data
          gcloud app versions list --service=default --format="value(id)" | head -1 > current-version.txt
          echo "Backed up current production version"

      - name: Deploy frontend to production
        run: |
          cd client/build
          gcloud app deploy app.yaml --version prod-frontend-$(date +%Y%m%d-%H%M%S) --quiet

      - name: Deploy backend to production
        run: |
          cd backend-deploy
          gcloud app deploy app.yaml --version prod-backend-$(date +%Y%m%d-%H%M%S) --quiet

      - name: Run production health checks
        run: |
          # Wait for deployment to be ready
          sleep 60
          
          # Test frontend
          curl -f https://${{ env.PROJECT_ID }}.uc.r.appspot.com/ || exit 1
          
          # Test backend
          curl -f https://backend-dot-${{ env.PROJECT_ID }}.uc.r.appspot.com/api/health || exit 1

      - name: Run smoke tests
        run: |
          npm run test:smoke

      - name: Monitor deployment
        run: |
          # Monitor for errors for 5 minutes
          for i in {1..30}; do
            echo "Health check $i/30"
            curl -f https://backend-dot-${{ env.PROJECT_ID }}.uc.r.appspot.com/api/health || exit 1
            sleep 10
          done

      - name: Notify deployment success
        if: success()
        run: |
          echo "✅ Production deployment successful"
          # Add notification logic here (Slack, email, etc.)

      - name: Rollback on failure
        if: failure()
        run: |
          echo "❌ Deployment failed, rolling back..."
          # Rollback logic here
          exit 1

  # Post-deployment monitoring
  monitor:
    name: Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}

      - name: Check application logs
        run: |
          echo "Checking recent application logs..."
          gcloud app logs read --limit=50 | grep -E "(ERROR|error|Error)" || echo "No errors found"

      - name: Check performance metrics
        run: |
          echo "Checking performance metrics..."
          # Add performance monitoring checks here

      - name: Generate deployment report
        run: |
          echo "📊 Deployment Report" > deployment-report.md
          echo "===================" >> deployment-report.md
          echo "Date: $(date)" >> deployment-report.md
          echo "Commit: ${{ github.sha }}" >> deployment-report.md
          echo "Branch: ${{ github.ref }}" >> deployment-report.md
          
          # Add more report content here

      - name: Upload deployment report
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report
          path: deployment-report.md
          retention-days: 30 